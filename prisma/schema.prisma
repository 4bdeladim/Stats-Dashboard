generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int		 @unique
  email              String? @unique
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  refresh_token_expires_in Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  deletedAt   DateTime?

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  deletedAt   DateTime?
}

model User {
  id            Int      @id @default(autoincrement())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  password      String?
  roleId        Int?
  permissions   Permission[] @relation("userPermissions")
  teamId        Int?
  leads         Lead[]       @relation("Agent")
  payments      Payment[]    @relation("Agent")
  role          Role?         @relation(fields: [roleId], references: [id])
  team          Team?         @relation(fields: [teamId], references: [id])
  account       Account?
  sessions      Session[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  deletedAt   DateTime?
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  token      String   @unique
  expires    DateTime

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  deletedAt   DateTime?
}

model Role {
  id          Int    @id @default(autoincrement())
  roleName    String @unique
  description String
  users       User[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  deletedAt   DateTime?

  @@index([roleName], name: "role_name_idx")
}

model Permission {
  id             Int    @id @default(autoincrement())
  permissionName String @unique
  description    String
  users          User[]  @relation("userPermissions")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  deletedAt   DateTime?

  @@index([permissionName], name: "permission_name_idx")
}

model Team {
  id          Int    @id @default(autoincrement())
  teamName    String @unique
  description String
  users       User[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  deletedAt   DateTime?

  @@index([teamName], name: "team_name_idx")
}

model Lead {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  country       String
  statusId      Int
  agentId       Int
  paymentTypeId Int
  payments      Payment[]

  status      Status       @relation(fields: [statusId], references: [id])
  agent       User         @relation("Agent", fields: [agentId], references: [id])
  paymentType PaymentType  @relation(fields: [paymentTypeId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  deletedAt   DateTime?

  @@index([email, agentId, paymentTypeId, statusId], name: "lead_idx")
}

model Status {
  id          Int    @id @default(autoincrement())
  statusName  String @unique
  description String
  leads       Lead[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  deletedAt   DateTime?

  @@index([statusName], name: "status_name_idx")
}

model Payment {
  id          Int      @id @default(autoincrement())
  label       String
  type        String
  amount      Float
  paid        Boolean
  paymentDate DateTime
  leadId      Int
  agentId     Int

  lead        Lead     @relation(fields: [leadId], references: [id])
  agent       User     @relation("Agent", fields: [agentId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  deletedAt   DateTime?

  @@index([leadId, agentId, paymentDate], name: "payment_idx")
}

model PaymentType {
  id          Int    @id @default(autoincrement())
  typeName    String @unique
  description String
  leads       Lead[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  deletedAt   DateTime?

  @@index([typeName], name: "payment_type_name_idx")
}
